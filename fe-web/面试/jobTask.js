/**
 * @description 用star方法描述接触过的项目，理论和实际相结合
 *  1. 业务背景：所面临问题的复杂度，模糊度，为什么要做，过程是如何做的，拿到怎样的结果，产生了怎样的影响力
 *  2. 重难点分析：所做的事情有哪些关键点，是如何安排过程，逐步找到解决办法
 *  3. 多角度提问：从项目管理，具体做等方向提问，尽可能从观察者的角度提问（base 的潜力）
 *
 */

/**
 * @description 中台管理端业务场景
 * 1. S：多管理后台项目的微前端体系建设（工程化体系建设）
 *    1.0 业务背景：
 *      1.0.1 管理端系统20+，操作人员处理业务场景天然割裂
 *      1.0.2 主要以表单和图表类业务为主，提升开发效率和夯实业务支撑能力是团队关键
 *    1.1 开发物料重复建设，无法形成有效沉淀，不同业务线彼此无交流，无法形成合力
 *    1.2 基建体系不统一，没有形成最佳实践，业务跟基建耦合
 *    1.3 功能类似需求场景多，开发效率待提高
 * 2. T：从规范，到参考最佳实践，逐步建设工程化（基建能力建设）
 *    2.1 结合项目业务特征，典型业务场景，封装公共组件，公共函数包（沉淀演示文档）
 *      2.1.1 典型业务场景抽象，支持一般的json 配置（提高开发效率）
 *      2.1.2 沉淀业务模版（日常业务需求支持模版修改）
 *      2.1.3 不同业务线沉淀可复用业务组件
 *      2.1.4 沉淀常用工具库
 *      2.1.5 多平台融合，建设微前端
 *    2.2 folk第三方cli,基于内核+插件机制建设合适自己的基建场景
 *      2.2.1 讨论，制定规范
 *      2.2.2 从需求评审到最终上线的完善流程能力建设
 *        2.2.2.1 代码规范，流程规范
 *        2.2.2.2 构建打包能力统一，开发物料建设，典型业务场景抽象
 *        2.2.2.3 CI/CD 能力建设
 *        2.2.2.4 node层/serveless建设
 *        2.2.2.5 扩大影响力，建设综合的前端框架（参考umi）
 *      2.2.3 输出可插拔的脚手架，涵盖全生命周期典型需求
 *    2.3 基于业务现状完善微前端体系
 *    2.4 devops流程标准化
 * 3. A 逐一说明以上目标是如何实践的
 *    3.1 json配置指的是什么，具体做了哪些工作
 *      3.1.1 沉淀常用业务组件，如表单，列表，图表等，在此基础上实现配置化迭代业务的能力
 *      3.1.2 基于vue,react方向沉淀组件20+，沉淀典型业务模版并整合进脚手架
 *    3.2 组件化具体做了什么
 *      3.2.1 基于pnpm管理的packages多包模式，建设组件库
 *      3.2.2 支持按需加载能力，多组件多目录
 *      3.2.3 统一构建能力，支持输出多种形式的模块
 *      3.2.4 基于story book 建设的组件文档
 *    3.3 工具库建设做了什么
 *      3.3.1 将多业务线可复用公共能力统一维护，组织技术评审
 *      3.3.2 统一构建方案，增加单元测试，形成有价值的沉淀
 *      3.3.3 建设工具库文档，描述模块能力，在团队推广使用
 *    3.4 微前端过程做了什么
 *      3.4.1 从结果上看是将分散的多平台集中管理，实现组件即服务的目标
 *      3.4.2 技术选型的过程中参考了开源方案和内部方案
 *        3.4.2.1 每一个微模块都对应一份静态资源，属于js入口
 *        3.4.2.2 将子系统迁移至聚合平台
 *      3.4.3 构建能力统一，支持webpack/vite的本地构建
 *      3.4.4 基建服务能力沉淀入组件库，工具库，代码规范，工作流规范等
 *    3.5 cli层面做了什么
 *      3.5.1 参考umi/ice在全生命周期做的事情（行业标准）
 *        3.5.1.1 项目新建，开发，构建等流程的标准化
 *      3.5.2 基础能力core + 插件机制的设计,站在开源的肩膀上贡献插件
 *    3.6 CI/CD等devops流程做了什么
 *    3.7 单元测试做了哪些工作
 *    3.8 日志监控等运维工作做了些什么
 *
 *
 *
 * 4. R 具体获得了什么结果，从定性和定量角度描述
 *
 * 拆解问题：微前端方案对比，主要做了哪些事情
 */


/**
 * 1. 多子系统的管理端微前端项目
 *  1.1 介绍：历史管理端子系统25+，技术栈包含vue体系，react体系等，在业务发展过程中面临如下问题
 *    1.1.1 多子系统操作跳转无法关联，给运营等使用方带来不便
 *    1.1.2 研发物料重复建设，缺少文档，无法形成有效沉淀
 *    1.1.3 基建体系不统一，没有形成最佳实践，业务跟基建耦合
 *    1.1.4 类似功能需求场景多，开发效率待提高
 *  1.2 解决方案：根据实际场景建立多子系统微前端项目，完善基建建设和提高开发效率
 *    1.2.1 调研企业内部和业界方案，输出技术文档并方案评审
 *    1.2.2 完善基建建设，包含业务组件库沉淀，工具库沉淀，研发工作流标准化等
 *    1.2.3 多系统CI/CD流程规范，打包构建，部署流程标准化
 *    1.2.4 典型业务场景沉淀标准化模版，一定程度提高业务开发效率
 *  1.3 难点分析
 *    1.3.1 调研微前端方案并结合实际技术选型
 *    1.3.2 历史业务迁移微前端业务保证系统稳定性
 *    1.3.3 工作流多项目推广，输出项目规范配置
 *    1.3.4 基座与业务项目的依赖版本管理，基建维护与迭代
 *  1.4 项目成果
 *    1.4.1 历史20+独立系统聚合成一个平台的微前端体系，支持系统级别的业务复用
 *    1.4.2 沉淀部门的通用业务组件库，函数工具库，结合第三方物料标准化研发基建物料
 *    1.4.3 沉淀多场景业务模版，支持快速模版开发，提高业务研发效率
 *    1.4.3 研发工作流标准化，涵盖从需求评审到上线的完整生命流程
 */




/**
 * 3. 工程化体系建设
 *   主要包含三个方面规范建设，基建建设，脚手架自动化
 *   3.1 规范建设
 *    3.1.1 结合部门PMO规范，建立从需求评审，开发，部署，上线，运维的全流程SOP
 *    3.1.2 参考开源方案沉淀项目工作流，eslint，prettier，husky，commitlint等
 *    3.1.3 监控指标建设，业务数据大盘建设，线上业务稳定性治理
 *   3.2 基建建设
 *    3.1.3 打包，构建方案交给脚手架，避免多项目重复建设
 *    3.2.1 业务层之上沉淀工具库，组件库，常用规范配置等
 *    3.2.2 提效方面沉淀物料模版，量化开发时间优化百分比
 *   3.3 脚手架自动化
 *    3.3.1 结合业务现状，参考业界方案沉淀可提效的脚手架
 *    3.3.2 将开发流程主要生命周期由脚手架接管，如新建模版，格式化代码，本地构建等
 *
 */

/**
 * 4. 可视化业务
 *  4.1 背景：QX在移动端，PC端都有较多的可视化业务，如地图工具，图表工具等，除了业务逻辑外存在很多重复的初始化，标准化逻辑
 *  4.2 动作：为了提高业务开发效率，实现研发物料复用，结合实际需求沉淀地图组件和图表组件
 *    4.2.1 地图以企业内部地图为例，沉淀常用业务组件10+，提供组件演示文档，统一打包方案，支持按需引入
 *    4.2.2 图表以echarts为主，沉淀常用hooks逻辑复用
 *    4.2.3 沉淀组件说明文档，内部发布 npm 包
 *  4.3 收益
 *    4.3.1 类似可视化业务通过业务组件实现简单调用，提高开发效率
 *    4.3.2 组件提供单元测试，形成部门的最佳实现，达到有效积累
 *    4.3.3 完善类型声明，支持历史业务和新业务调用
 */

/**
 * @description 监控体系与稳定性业务建设
 * 0. 最核心的是全面的描述技术特征和业务特征，做有针对性处理
 * 1. 基于内部工具/sdk 封装可复用的监控工具
 * 2. 确定监控需求
 *    2.1 接入监控后可以获取（可以拿到哪些数据）
 *      2.1.1 页面性能指标如 页面加载时间，DOM 加载时间，页面完全加载时间等
 *      2.1.2 网络请求指标
 *      2.1.3 错误上报
 *        js错误
 *        资源加载错误（cdn）
 *        网络请求错误
 *    2.2 结合业务流程特征建立指标大盘（期望监控哪些数据）
 *      2.2.1 建立页面核心大盘 如性能指标，网络指标，访问量等
 *      2.2.2 业务流程加工自定义成功指标 如支付成功率
 *      2.2.3 自定义节点埋点，数据分析
 *    2.3 配置合理告警机制
 *      2.3.1 为关键性能指标和业务指标设置合适的阈值，并配置实时告警机制。当监测到异常或达到预警条件时，及时触发告警
 *      2.3.2 告警规则可以分为两类：相对值告警和绝对值告警
 *        2.3.2.1 相对值告警：指根据值的相对变化程度判断是否存在异常。包括同比和环比
 *        2.3.2.2 绝对值告警：指根据值本身的大小判断是否存在异常。如：连续t分钟内的[平均值｜最大值｜最小值] [大于｜小于]x则触发告警
 *      2.3.2 错误追踪和排查
 * 3. 流程稳定性建设
 *    3.1 从开发到上线流程的规范建立
 * 4. 结合业务特征针对性治理
 *    4.1 从发现问题到解决问题的流程完善
 *
 *
 *
 */

/**
 * @description app内嵌H5的架构优化和性能优化
 *
 *
 *
 *
 *
 * 5. 性能优化场景（如何做性能优化）
 *   5.1 通用方案和业务特征方案
 *    5.1.1 结合监控梳理业务加载的主要流程
 *    5.1.2 分析卡点因素，结合具体指标针对性治理
 *
 *
 *
 */


/**
 * @description 工程师视角
 * 1. 思考真正适合自己的定位是更重要的，这能在我们在当前的生态下获得持续的正反馈，让自己的价值得以体现。
 * 2. 假如是前端工程师，其定位其实是什么
 *    2.1 定位：工程化能力的建设者，设计架构基建能力的开发。
 *    2.2 价值：业务上，辅助业务持续快速落地，降本增效。技术上，提高开发者的工作效率，降低项目维护成本。
 *    2.3 工程师最大的目的还是效率的提升，个人价值的最终的表现可以狭义的说是在某个方向上，突出了自己的专业性与不可替代性。
 *    2.4 做方案设计，技术规划看起来是在务虚，其实是现实世界的解法，积累自己的核心竞争力
 * 3. 前端工程团队的价值是什么
 *    3.1 基本价值：效率，质量，体验，协作，通过建立大盘数据定量反馈
 *    3.2 增量价值：前瞻性，数据决策，其它
 *    3.3 业务思考：业务场景是哪些，服务于哪些用户，做什么可以提高边界效应
 *    3.4 中台和业务角色：哪些能力由业务支撑，哪些是中台推动
 *    3.5 自我突破&成长： 向上管理&自我管理实现低预期高回报
 *
 */
