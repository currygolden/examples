/*
 * @Author: your name
 * @Date: 2022-02-26 18:49:45
 * @LastEditTime: 2022-04-19 23:45:25
 * @LastEditors: Please set LastEditors
 * @Description: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 * @FilePath: /examples/fe-web/工程化/index.js
 */
/**
 * tips: 方法论始终贯穿其中，明白前端/后端/数据在产品周期扮演的角色，主要架构存在什么问题
 * 1. 前端工程化”的定义：以降低成本、提高效率、保障质量为目的，通过一系列规范、工具、流程（分别对应软件工程中的方法、工具和过程）作为手段的实践体系
 * 2. 整体进度
 *      2.1 脚手架方案：提供工程搭建；ui/libs研发资源；规范系统的CI/CD；质量检测体系
 *      2.2 标准化：同类项目有多套规范及协作工具，团队共存多套同类工具，低水平轮子多，维护成本高；工具没有形成生态，不能发挥规模效应
 *          需求规范：MRD-PM-PMO-RD之间的共识
 *          设计规范：UI物料库 基础组件-业务组件-区块模版-页面模版-项目模版
 *          研发规范：统一研发框架工具 xxxCLI 散乱的工具难以发挥规模效应，无法形成生态,架构采用微内核和可插拔插件体系
 *          架构规范：实现自动化项目创建流程（自动接入基础服务），抽象场景模板满足多场景定制化需求
 *          发布规范：流水线持续集成 + 静态网站托管，检查/测试/发布
 *          运维规范：日志告警+coe
 *          规范落地：“普法”加“执法”落地标准化
 *      2.3 平台化：整体架构从下往上是规范-实践，从左往右是流程，生命周期
 *      2.4 云平台：
 *          AirLowCode 低代码研发探索
 *          在线研发工具 WebIDE
 *  3. 云开发平台整体架构
 *  4. 工程化专注解决面临的问题，还有一些基础能力需要其它服务支持
 */

/**
 * 1. 架构设计
 * 
 * 
 * 
  */


 /**
  * 基础能力介绍
  * 1. code github/gitlab(集成CI/CD)
  * 2. 研发套件
  * 3. devtools
  * 4. oceanus 运维管理
  * 5. raptor
  * 6. webstatic
  */

  /**
   * 插件场景(主要看插件应用的生命周期)
   * 1. 开发套件 plugin
   * 2. shell/http（偏云函数）
   * 
   */
  /**
   * 1. 这里收集的是一些阅读过的工程类的源码
   * 
   * 
    */
