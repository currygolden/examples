
/**
 * @description C端营销体系下，H5场景的多端适配
 *  1. 跨端方案的原理
 *    1.1 什么是运行时和编译时
 *       编译时：一般来说定义成构建编译，也就是生成目标产物，对于传统的web项目，主要就是js/css等静态资源
 *              满足对宿主语法兼容，之后具体的渲染过程交给宿主环境（这里的编译和开发语言层面的编译不同但名次介绍也相似）
 *              编译目标的差异取决于宿主环境，一般是借助AST,其实也是分层的思想
 *       运行时：一般来说满足三个场景1. 程序运行的时候；2.运行是时候的环境和必要的库
 *  2. 应用跨端体系的常见业务场景&业务诉求
 *     2.1 小程序本身能力支持跨端和业界典型方案调研
 *     2.2 阿里技术从行业规范定义低代码的完整体系，跟跨端有部分重叠，属于运行时
 *        2.2.1 对于具体的技术栈或者跨端框架，要实现跨端也是从渲染时补充AST，或者运行时基于vNode像目标环境渲染，提供必要的DOM，BOM
 *
 */








/**
 * 参考阅读
 * https://juejin.cn/post/6918881497264947207（可视化拖拽技术系统介绍）
 * https://www.yuque.com/alsmile/topology/daf7sb（综合生态体系）
 * https://juejin.cn/post/6844903854169915405 (web端常用距离汇总)
 * https://juejin.cn/post/6854573211552579592 （低代码的开发完整生命流程）
 * @description 类似营销H5业务的可视化搭建
 *  1. 可视化技术架构和关键技术解析
 *    1.1 业务场景&商业价值
 *      1.1.1 B端中后台业务拖拽建站
 *
 *      1.1.2 营销H5业务的可视化搭建
 *        1.1.2.1 物料库的建设
 *          物料库基于组件库，组件库的设计主要是数据结构的拓展去实现典型业务场景
 *        1.1.2.2 编辑器核心
 *          1: 最主要是数据驱动，由json记录项目/页面/组件的信息，配合动态组件，展示组件信息
 *          2: 组件拖拽 处理drop drag事件，简单交互就是解决三段式（对于移动端考虑兼容性），这一层在画布容器上
 *             常见二维几何变换，这里可以在细节上非常深入（属于领域知识）
 *          3: 画布
 *             给画布宽高属性赋值，可以动态调整画布规格
 *             监听鼠标down/move/up 事件，处理组件的移动，处理定位
 *             常见距离值：
 *          4: 组件容器
 *          5. 属性/事件/动画可视化（这些都是数据驱动，应该不难理解）
 *        1.1.2.3 编译时/运行时的区别
 *          1. 组件存在于本地可以被loader等识别编译，对于动态加载的组件即umd/esmodule形式，则需要自行处理渲染流程
 *
 *
 *
 */

/**
 * @des 范式渲染的案例
 * https://xrender.fun/generator： react方向
 *
 */


/**
 * @description 开发跨平台小程序汇集
 * 1. 滴滴mpx https://mpxjs.cn/
 *  1.1 沉淀脚手架约定开发规范
 *    开发一般cli 必要知识集合 vue-cli/vite/umi/vant-cli 等，以及mpx-cli
 *    实践时参考阅读：https://juejin.cn/post/6932610749906812935
 *    1. 必要的用户命令行信息收集交互
 *    2. 常见命令行功能 create/dev/build/lint/install/generate/其它
 *
 *
 */
