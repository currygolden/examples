/*
 * @Author: liyu38 liyu38@meituan.com
 * @Date: 2022-03-05 12:32:18
 * @LastEditors: liyu liyu38@meituan.com
 * @LastEditTime: 2022-06-13 15:28:46
 * @FilePath: /examples/fe-web/方法论/index.js
 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 */
/**
 * 1. 方法论确实很有效，很多场景下帮你对一定复杂度的事情梳理进行梳理，统筹规划
 * 当着手去做一件事情该如何展开
 * 1.1 介绍背景/当前现状/存在的问题
 * 1.2 最佳实践/行业探索对比
 * 1.3 技术方案/基本架构（可以把要做什么解释清楚）
 * 1.4 推进过程/阶段进展里程碑（可以看到具体技术的实现只占小部分）
 * 1.5 结果对比/数据量化（提前进行指标建设，给人直观的结果对比）
 * 1.6 经验产出/推广扩大影响力
 * 1.7 总结与未来展望
 */

/**
 * 一些文档意识
 * 1. https://juejin.cn/post/7017643726944108558 前端产出设计文档
 * 2. 如何写汇报文档
 *
 *
 *
  */


/**
 * 需要去有意识的培养什么样的能力，最核心的是产出才意味着积累
 *  1. 业务解决能力
 *    这是最基本的遇到问题处理问题的能力，主要是需要debug业务代码，一般来说可以从以下几个方向来积累
 *    1.1 去总结典型业务场景面临的主要问题，不能是每一次遇到的业务场景都是新的类型，可以是封装通用组件
 *    1.2 分专题/技术专题去解决web 端常见业务场景（在现在大部分都有可复用组件）
 *    1.3 在实际业务里遇到的案例，参考开源项目突出解决的问题落脚点
 *
 *  2. 代码能力&技术视角
 *    有规划的借鉴社区最新技术实践（阅读源码必须带有目的，否则很难出得来）
 *    2.1 总结优秀方案的实现特点，分模块
 *    2.2 拆解开源工程的实现，代码风格
 *    2.3 典型与业务逻辑无关的代码实现
 *    2.4 一定程度的 leetcode
 *
 *  3. 架构能力
 *    项目产品的全局视角，从需求评审到部署上线，监控的全流程，以工程化能力展开
 *
 *
 *  4. 如何规划产出，推进度
 *    4.1 方向是业务还是技术基建
 *    4.2 是提高效率还是建设稳定性
 *    4.3 最后如何反思过程和评价结果
 *
 *
 *
 */
