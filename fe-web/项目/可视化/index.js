/**
 * @description 可视化方向学习策略
 * 0. 学习资料搜集
 *   在具体开始之前明确什么是核心能力（不需要一开始就深入细节，明确市场方向）
 *   0.1 https://juejin.cn/post/6864072407461101582
 *   0.2 https://github.com/ZTStory/vue-datav(大屏可视化业务实现)
 *   0.3 https://github.com/AnsGoo/openDataV （vue大屏可视化拖拽实现，github搜索 大屏拖拽）
 *   0.4 http://www.webgl3d.cn/pages/aac9ab/ （webgl 电子书教程）
 *   0.5 https://threejs.org/examples/#webgl_animation_keyframes （three.js文档）
 *   0.6 https://github.com/wangyuan389/mall-cook 移动端/小程序拖拽实现
 *   0.7 https://github.com/myfirebug/bigscreen react可视化拖拽
 * 1.why: 为什么要学习可视化方向
 *   1.1 建立职业护城河，在有一定价值的方向沉淀，避免长期低水平重复，也就是一般说的垂直领域深耕
 *   1.2 为什么选择这个方向，有什么商业策略以及数据支撑
 *      1.2.1 可视化属于web开发的一个范畴，在移动端增长放缓以及B端走向低代码的当下，结合兴趣和商业分析这是我的兴趣所在
 *      1.2.2 相对而言，更好对接物联网，AI智能以及图形渲染领域
 *      1.2.3 通用能力是必备的，只是在这个方向持续深耕而已
 *      1.2.4 自己需要持续调研产业走向以及行业企业的需求走势
 *  2.how: 打算如何系统的学习
 *   2.1 关键词匹配搜索相关资料（垂直社区，github,chatgpt）
 *   2.2 核心模块拆解（理论体系+项目实践）
 *    2.2.1 以echarts这种图表库为例如何做好基础的数据渲染
 *      2.2.1.1 关于在vue/react里封装echarts通用业务组件，提高业务开发效率（跟业务组件封装差别不大）
 *      2.2.1.2 结合具体业务场景，大部分是实现图表，存在有些性能优化的case(此时还是缺少有价值的沉淀)
 *      2.2.1.3 实践大屏可视化项目
 *    2.2.2 业务层面处理echarts核心在于响应式方案以及模块化组织图表属性
 *    2.2.3 大屏可视化拖拽项目
 *      2.2.3.1 项目feature拆分以及关键点梳理
 *
 *
 */


/**
 * 参考阅读：
 * 1. 管理端大屏可视化项目
 * 2. 地图业务
 * 3. 可视化图表
 * 4. 大数据展示
 *
 */



/**
 * @description 数据大屏技术方案
 * 1. 大屏响应式处理(核心对于多应用终端设备表现一致)
 *   1.1 响应式方案选型 vw样式方案+flex弹性布局
 *   1.2 配置postcss插件 postcss-px-to-viewport 基于编译方案将css单位处理成vw/vh单位
 *     1.2.1 编译不能解决全部场景，对于js变量赋值的单位，需要手动单位转化
 * 2. 图表库选择
 *   2.1 无特殊要求一般是echarts
 * 3. 开发资源调研
 *   3.1 基于echarts的react/vue基础组件
 *   3.2 逻辑场景复用
 * 4. 业务层抽象
 *   4.1 基于自身业务特性封装容器组件和可复用物料
 *   4.2 通用业务组件沉淀
 * 5. 典型业务逻辑梳理
 *   5.1
 */



/**
 * @description 基于类似echarts的可视化工具库方案
 * 1. canvas和svg
 *
 *
 */




/**
 * @description 可视化之拖拽式大屏方案
 * 1. 核心编辑器组成
 *   1.1 左侧组件&图层tabs
 *     1.1.1 可用组件数据列支持功能
 *       1.1.1.1 展示全部可用组件
 *         组件数据模型管理（基类class+继承）
 *         组件分类
 *         组件通用/特定模型设计
 *       1.1.1.2 组件可点击，可拖拽至编辑区域（此时获取描述组件对象的数据模型）
 *         基于原生html拖拽api,获取组件信息渲染
 *       1.1.1.3 组件可以适配低代码需要设计基础服务协议即物料数据模型，若需要对接开源方案，需要底层适配组件（一般基于原生方案的组件都可行）
 *         规范层适配
 *         物料对接，渲染器对接
 *       1.1.1.4 数据模型具体的定义，如何设计和继承
 *       1.1.1.5 容器组件，控制物料本身的任意样式控制
 *          根据具体业务场景选择流体布局（移动端常见）还是完全受控布局
 *   1.2 右侧属性编辑区域
 *     1.2.1 组件的属性包含哪些部分
 *        样式属性
 *          来自当前选择组件的样式数据模型，对于具体的组件样式数据基于基类拓展
 *        业务组件自定义属性
 *          来自当前选择组件的数据模型，最后体现出来的也是表单属性
 *        数据配置
 *          这里可以做到与后端集成，灵活性比较高（这里待拆解，目前以静态数据为主）
 *        在定义组件模型的时候每一类具体组件都是提前设计的结构
 *     1.2.2 基础动态化表单收集，修改属性
 *        1.2.2.1 前面的属性数据可以设计的很灵活，最终体现出来是不同层级的表单数据
 *        1.2.2.2 需要设计动态表单组件，基于基础表单按需渲染
 *        1.2.2.3 数据驱动，修改的表单属性反映到视图结构上
 *   1.3 中间核心渲染器区域
 *      1.3.1 渲染器主要是将数据模型映射到视图上，可以是传统的dom形式，也可以基于canvas
 *      1.3.2 只要数据模型符合要求，渲染逻辑可以基于行业建立规范，这也是low code发展的基础
 *      1.3.3 渲染器实现有很多通用与业务无关的模块，结合具体项目拆解如下
 *        1.3.3.1 基础组件列表的拖拽与点击
 *          点击或者拖动获取组件本身的信息，释放的时候确定当前组件的二维位置，以及全局数据状态更新
 *        1.3.3.2 画布内鼠标勾选移动处理组件组合
 *        1.3.3.3 任意组件的样式控制
 *          任意位置布局：根据拖动位置确定释放点的坐标，从而确定相对画布的位置，进而根据绝对定位确定物料的样式
 *          流体布局：常见于小程序，移动端的项目，不可以自由释放，结合预设区域和flex布局
 *        1.3.3.4 物料容器组件，实现任意元素的完整控制
 *          缩放，旋转，8个角度的控制
 *   1.4 多包管理模式（项目架构）
 *     1.4.1 core:核心渲染器；components:组件物料资产；shared：工具包资产；others: 构建规范化其它基建
 *   1.5 基础物料特征
 *     1.5.1 组件本身业务实现
 *     1.5.2 组件配置文件
 *     1.5.3 再次回忆组件配置模型和组件实现是如何关联的（拖拽api实现）
 *     1.5.4 当前实现最简易，可以拓展接入其它物料平台，包括meta信息，组件配置信息等
 *  1.6 数据模型汇总
 *     1.6.1 组件数据模型
 *       组件配置基类，具体组件实现配置类，样式属性，业务属性，数据属性
 *     1.6.2 全局状态管理
 *        1.6.2.1 组件的层级比较多样，这里设计数据流时采用全局状态管理，并且按模块分类
 *        1.6.2.2 操作状态记录采用indexDB，非关系型结构存储，支持最大记录回溯
 *
 *
 *
 *
 * 2. 实现可视化拖拽编辑项目（前后端）
 *   2.1 目标：形成低代码&可视化领域技术护城河，实践vue3,koa主要技术体系
 */




/**
 * @description canvas核心知识体系
 * 1. https://www.canvasapi.cn/ （api 中文文档）
 * 2. 练手项目1: https://github.com/buuing/lucky-canvas/stargazers
 * 3. https://segmentfault.com/q/1010000021916478 （canvas动画与css动画性能讨论）
 * 4. https://juejin.cn/post/7008064185972031524 （canvas基础教程）
 *
 */




