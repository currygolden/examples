/**
 * @description 参考阅读资料
 * 1. https://www.nodejs.red/#/nodejs/base/what-is-nodejs
 * 2. https://www.bookstack.cn/read/Nodejs-Roadmap/_coverpage.md
 * 3. http://doc.ssr-fc.com/ （ssr node 一体化方案）
 * 4. https://midwayjs.org/docs/serverless/migrate_koa （midway node 全栈方案）
 */



/**
 * @description 项目实践
 * 1. https://github.com/Imfdj/egg-beehive/blob/main/README.md
 *
 */






/**
 * 拆解egg-beehive项目
 * @description:数据库设计
 * 1. 在开始具体的curd业务之前，先要准备数据
 *   1.1 使用mysql初始化数据库，提供sql建立表结构
 *   1.2 在egg-Sequelize背景下完善数据库初始化
 *   1.3 借助工具实现CURD MVC的工程模版（一般业务尝试多了都比较类似）
 *   1.4 主要是熟悉egg框架和周围生态，属于实践操作的部分，遇到了具体去练就可以
 * 2. 业务场景分析，具体接口设计
 *    2.1 user表
 *      2.1.1 按关键词查询全部用户（模糊搜索，分页匹配）
 *      2.1.2 按id查询用户
 *    2.2 权限体系
 *      2.2.1 用户注册 邮箱/手机号-验证码 - 创建用户数据
 *        2.2.1.1 配合第三方服务如邮箱，验证码
 *        2.2.1.2 支持第三方如 github 登陆/sso登陆等
 *        2.2.1.3 密码在交互过程中需要加解密
 *        2.2.1.4 logout处理token或session,有一层redis缓存用户信息
 *        2.2.1.5 权限体系借助网关，中间件
 *
 */



/**
 * @description node核心问题
 * 参考：https://juejin.cn/user/1415826704971918
 * 1. koa与express差异，如何理解koa的洋葱圈模型，解析koa库
 *    1.1 现象：洋葱圈模型是指每一个中间件会执行两次，通过next调整函数控制权，让前面的中间件可以使用后面的数据
 *    1.2 compose函数接收中间件数组，开始调用执行第一个中间件，参数是context和第二个调用，将第二个调用作为next传入
 *    1.3 核心：通过手动调用next,调整函数执行权到下一个中间件，此时涉及函数执行栈和异步队列
 *        1.3.1 如果是同步代码，不依赖后续中间件的逻辑，可以在next之前执行
 *        1.3.2 如果有异步逻辑，next本身也是异步，就会有当前事件循环里的异步队列
 *        1.3.3 当中间件和next逻辑执行完，此时函数出栈，按照栈顺序执行next后的逻辑，如果有异步逻辑，同样按异步队列顺序执行
 *        1.3.4 边界场景兼容
 *    1.4 以单元测试和工程体系分析koa,输出思维导图
 * 2. node.js特性
 *    2.1 Javascript 在服务端的运行环境，构建在 chrome 的 V8 引擎之上，基于事件驱动、非阻塞I/O模型，适合于 I/O 密集型的应用场景，高并发应用场景，不适用大量计算，CPU 耗时的操作
 *    2.2 在多核 CPU 系统之上，可以用过 child_process.fork 开启多个进程
 *    2.3 Javascript 是单线程，但是做为宿主环境的 Node.js 并非是单线程的
 * 3. Node.js运行时环境：了解Node.js的基本架构和工作原理，包括事件循环、模块系统、缓冲区和流、异步I/O等。
 *    3.1 Node.js的基本架构和工作原理如下
 *      3.1.1 定义：基于 Chrome V8 引擎的 JavaScript 运行时，用于构建高性能的网络应用程序
 *      3.1.2 单线程和非阻塞I/O模型：采用单线程的事件循环机制来处理请求，使得它能够高效地处理大量并发请求，遇到异步操作不会阻塞，而是注册回调函数
 *      3.1.3 什么是node.js的事件循环机制
 *        1. 介绍与浏览器循环机制的差异
 *      3.1.4 V8引擎：Node.js使用 Google Chrome 浏览器中使用的 V8 JavaScript 引擎作为其运行时引擎，将 JavaScript 代码直接编译成机器码执行
 *      3.1.5 事件驱动+回调函数：异步操作可以通过注册事件，定义回调函数，当异步结果拿到执行后续逻辑（实现事件调度管理机制）
 * 4. Node.js中的事件驱动编程是什么，并说明它与传统的线程驱动编程模型的区别
 *    4.1 在传统的线程驱动编程模型中，每个任务通常都会分配一个独立的线程来执行。每个线程独立运行，并且可以同时执行多个线程，从而实现并发。每个线程都有自己的堆栈和上下文，线程之间的切换需要耗费一定的资源
 *    4.2 对比事件驱动编程模型的关键点在于：
 *      4.2.1 Node.js使用单线程执行JavaScript代码，只能执行一个任务。这消除了线程之间的竞争和同步问题，简化了编程模型
 *      4.2.2 非阻塞I/O：将I/O请求委托给操作系统，然后继续执行其他任务，异步代码不阻塞其它流程
 *      4.2.3 事件驱动：通过监听和响应事件来处理异步操作，当异步操作完成时，Node.js会触发相应的事件，并执行注册的回调函数来处理操作结果。
 *      4.2.4 注册事件添加回调函数，事件循环机制重复执行，事件的注册与监听依赖event emmitter(参考dom,组件)
 *    4.3 特点：适用于I/O密集型的任务，在处理计算密集型任务时可能存在一些挑战，因为长时间运行的计算任务可能会阻塞事件循环
 * 5. node.js里常用的模块有哪些，介绍具体使用例子
      5.1 API的使用不展开
   6. 在Node.js中，什么是流（Streams）？请说明流的类型和如何使用它们处理大量数据。
      6.1 流（Streams）是一种用于处理大量数据的抽象概念。流可以被看作是一系列连续的数据块，这些数据块可以逐个地进行处理，而不必等待整个数据集加载到内存中。
      6.2 node.js在处理大量数据的I/O操作时，可以注册回调函数不需要担心阻塞
   7.如何在Node.js中处理错误和异常？
      7.1 使用try-catch语句块来捕获同步代码中的异常（可能出错的地方）
      7.2 回调函数的错误参数：一般写法是错误先行
      7.3 处理Promise.catch
      7.4 利用 new Error 抛出自定义错误
      7.5 应用级别的兜底，处理未补获的异常
   8.Node.js中的全局对象是什么？它们有什么作用？
      8.1 global对象：global对象是Node.js中的顶层对象，类似于浏览器环境中的window对象
      8.2 其它的类似：process，console,buffer,定时器setTimeout，setInterval
   9.如何在Node.js中处理异步操作？
      9.1 一般来说是回调函数，promise，async/await
      9.2 回调函数的实现依赖事件系统
  10. 测试与调试
      10.1 单元测试
      10.2 如何进行性能测试和压力测试？偏向测试专业问题了
      10.3 QPS是指每秒查询率（Queries Per Second）。它是用于衡量计算机系统、数据库或网络应用程序的性能的一种指标
  11. 如何防止常见的安全漏洞，如跨站脚本攻击（XSS）和SQL注入

  ========== serverless =======


  ========== 数据库操作 ======







核心模块：熟悉Node.js的核心模块，如http、fs、path、util等，了解它们的用法和功能。

包管理器：掌握使用Node.js的包管理器，如NPM（Node Package Manager）或Yarn，了解如何初始化项目、安装、更新和删除依赖包。

Express框架：熟悉最常用的Node.js Web框架之一——Express，掌握路由、中间件、模板引擎等概念和用法。

异步编程：Node.js是基于事件驱动和非阻塞I/O的，因此深入理解回调函数、Promise、async/await等异步编程概念和技术是必要的。

数据库访问：了解如何使用Node.js与数据库进行交互，包括关系型数据库（如MySQL、PostgreSQL）和NoSQL数据库（如MongoDB）的连接、查询和操作。

安全性：了解常见的Web安全问题和防范措施，如跨站脚本攻击（XSS）、SQL注入、认证和授权等。

调试和性能优化：熟悉使用调试工具和技术，如Node.js自带的调试器、Chrome DevTools、性能剖析工具等，以及优化Node.js应用程序的方法。

部署和维护：了解如何将Node.js应用程序部署到生产环境中，包括配置服务器、处理日志、监控和扩展应用等。
 */
