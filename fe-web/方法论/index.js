
/**
 * 1. 方法论确实很有效，很多场景下帮你对一定复杂度的事情梳理进行梳理，统筹规划
 * 2. 但凡没有具体的规划做事，最后一定虎头蛇尾，产出说不清楚！！！
 * 3. 总体而言可以看出缺乏思考的行为最后不仅没有苦劳还会被批评
 * 4. 整体上要做什么，具体如何开展，如果总结沉淀，形成整体的闭环
 * 5. 能欺骗自己的只有自己，要想切实的进步，就要把日常工作和指导理论相互结合，相互促进
 *
 * 当着手去做一件事情该如何展开 (工程进度规划能力)
 * 1.1 介绍背景/当前现状/存在的问题
 * 1.2 最佳实践/行业探索对比
 * 1.3 技术方案/基本架构（可以把要做什么解释清楚）
 * 1.4 推进过程/阶段进展里程碑（可以看到具体技术的实现只占小部分）
 * 1.5 结果对比/数据量化（提前进行指标建设，给人直观的结果对比）
 * 1.6 经验产出/推广扩大影响力
 * 1.7 总结与未来展望
 *
 *
 */

/**
 * 一些文档意识，文档能力
 * 1. https://juejin.cn/post/7017643726944108558 前端产出设计文档
 * 2. 如何写汇报文档
 * 3. 有意识建设周/月/Q1/H1 要做的事情，预计解决什么问题
 *
 *
 *
  */


/**
 * ==================》 有意识的能力沉淀&建设
 * 需要去有意识的培养什么样的能力，最核心的是产出才意味着积累，被动或者主动所做的事情最后需要落到能力的沉淀上
 * 不有意识去沉淀就会陷入无价值的业务陷阱&沦为页面工具人
 *  1. 业务解决能力
 *    这是最基本的遇到问题处理问题的能力，主要是需要debug业务代码，一般来说可以从以下几个方向来积累
 *    1.1 去总结典型业务场景面临的主要问题，不能是每一次遇到的业务场景都是新的类型，可以是封装通用组件
 *    1.2 分专题/技术专题去解决web 端常见业务场景（在现在大部分都有可复用组件）
 *    1.3 在实际业务里遇到的案例，参考开源项目突出解决的问题落脚点
 *    1.4 在通用能力上做积累，这一块属于形的部分，有了AI的加持这里不用担心
 *
 *  2. 代码能力&技术视角
 *    有规划的借鉴社区最新技术实践（阅读源码必须带有目的，否则很难出得来）
 *    2.1 总结优秀方案的实现特点，分模块
 *    2.2 拆解开源工程的实现，代码风格
 *    2.3 典型与业务逻辑无关的代码实现
 *    2.4 一定程度的 leetcode
 *
 *  3. 架构能力
 *    3.1 项目产品的全局视角，从需求评审到部署上线，监控的全流程，以工程化能力展开
 *    3.2 不管是B/C/技术类项目，能根据业务周期定位当前业务存在最大的问题
 *    3.3 也就是说立足日常业务抽象一层，了解整体前进的方向和规划
 *
 *  4. 如何规划产出，推进度
 *    4.1 方向是业务还是技术基建
 *    4.2 是提高效率还是建设稳定性
 *    4.3 最后如何反思过程和评价结果
 *    4.4 当前要去做什么，预期解决什么问题和体现什么价值
 *
 *  5. 方案设计与汇报能力（有现成答案可以抄都做不好吗）
 *    5.1 如何就某一个领域问题设计技术方案（技术方案文档该包含什么）
 *      5.1.1 技术领域的技术方案该包含哪些模块
 *        背景与问题：为什么要做，当前业务现状是什么，不做会面临着什么问题
 *          1. 体现出全面认识问题，了解业务，说清楚要解决问题的价值
 *          2. 体现出问题的模糊度，复杂度
 *      5.1.2 定义目标
 *        基于问题描述要做什么，输出哪些能力，可定性&量化
 *      5.1.3 方案设计
 *        行业调研
 *        方案重难点分析（没有核心点无法体现能力，可以是解决业务痛点，可以是流程复杂，要具体让人感知到问题的难度）
 *        流程图介绍/架构图介绍
 *        整体系统介绍
 *      当前进展及收益
 *      后续规划等
 *  6. 如何画架构图，流程图等各种需要的图表展示
 *      6.0 一切是逻辑第一
 *      6.1 对比表格，规划表格（简单）
 *      6.2 流程图的要素是什么
 *        6.2.1 各要素定义如下
 *        开始/结束节点：用椭圆形表示流程的开始和结束。开始节点标志流程的初始点，结束节点标志流程的结束点。
          操作/处理节点：用矩形框表示流程中的操作或处理步骤。每个操作节点代表一个具体的任务或活动。
          判断节点：用菱形表示流程中的判断条件。判断节点根据条件的真假，决定流程的分支走向。
          连接线/箭头：用箭头表示流程之间的顺序关系或数据流向。连接线指示流程的执行顺序，箭头表示流程的流向。
          输入/输出：用矩形框或平行四边形表示流程的输入或输出。输入和输出节点显示流程需要的数据或产生的结果。
          注释/说明：用矩形框或波浪线表示对流程的解释或额外的说明。注释节点可以添加文本，在图中解释流程的目的或特定要求
        6.3 方案设计图/架构图该怎么画
          6.3.1 多参考开源，主要是逻辑先行，从左到右，从下到上，从局部到整体
    7. 人才通用能力

 *
 * 目标
是要解决什么问题，这部分不是直接说做什么工具

方案
说明用什么方案来辅助目标达成，这部分才引出要做什么，承载方式可以是工具或者流程规范之类

方案调研
学习最佳后，需要引出我们要做工具库的结论

整体规划--->整体方案
描述我们将如何做，比如通过npm包方式为平台或组件提供xxx、xxx能力，并根据反馈或需求进行完善及迭代……
图可以体现工具库的用户，比如应该是支撑各类独立平台或者是EDC组件
纵向：应用层---产物---架构层，横向：工程化及规范

功能点
可以列个思维导图，列的完整一些，每个分类
 *
 *
 *
 */


/**
 * 能力晋升需要关注的点 1. 拆解考核能力的几个纬度 2.领域知识内的能力模型
 * ===========================》》》》》》能力分纬度拆解
 * 1. 业务理解
 *   1.1 能力的增进不是引进新技术，学习新技术，这些都是形（是千变万化的），不是处理日常业务就low, 做技术项目就高大上
 *       不带目的的搞架构，性能优化都是没有规划的体现.需要立足自己所负责的业务特征
 *   1.2 业务特征具体含义对于前后端不一样，前端应该更关注业务模型而不是业务逻辑（侧重点不一样），后者需要结合产品模型来优化运营指标，而前端更加突出在通用模型上比如
 *       产品是B端还是C端，处于业务周期的什么阶段（需要效率还是需要稳定性），是突出典型业务场景的沉淀还是要求较高程度的性能优化
 *   1.3 只有了解业务模型，当前阶段面临最大的问题，才可以摆脱被动思考，积极主动的去调研，规划，落地合适的中长期规划
 *   1.4 最大的问题是陷入业务，没有跳出来积极主动的做中长期规划（这之后才是方法论的实践）
 *
 * 2. 方案设计
 *   2.1 有了实际的中长期规划，下一步是合理的方案设计，就好比做大中型项目时候需要做技术方案设计，来把握进度，落实进度
 *   2.2 方案设计参考前面的方法论
 *
 * 3. 代码开发
 *   3.1 了解整体架构，知道如何采用技术手段降低或者不增加系统复杂度，通过架构图能清楚描述业务和技术的特征（至少能给别人讲清楚）
 *   3.2 编码经验来自于多读多写，多总结，就跟篮球投篮训练一样
 *
 * 4. 业务成果
 *   4.1 为了避免做事但是没想清楚为什么要做，或者为了做而做，最后事情做完了需要落实到定量的指标，逻辑清楚的的描述获取的收益
 *   4.2 可以客观的说明积极和负面影响
 *
 * ===============================》可以说这几步说清楚了如何主要发现去做一件事
 *
 */

/**
 * 前面2步解决了要做什么，如何具体去做，还剩下如何系统，科学的把做过的事情讲清楚（一方面让别人，自己客观的评价自己），另一方面能能力迁移，扩大影响力
 * 1. 业绩自评
 *  1.1 一段周期以内，提炼出自己做的主要几件事情（业务需求，技术需求）结合能力模型来自我打分
 *    首先需要了解领域知识内的能力模型
 *    要有独立且系统的需求场景来负责，可以是业务规划指派过来的（如果没有说明没有主动去承担责任，或者主管没有清晰的分配职能），最后一定会导致成长不够或者绩效不够
 * 2. 日常工作中牢记对能力的培养
 *  2.1 基于业务定目标
 *    SMART原则：我们的目标要基于技术业务定，目标一定要具有具体性（S）、可衡量性（M）、可实现性（A）、相关性（R）和时限性（T）
 *    业务发展阶段对质量和效率最关注的点是哪个？效率和质量的矛盾如何平衡？
 *  2.2 面向目标做规划
 *    有积累的事：我为公司前端留下了什么
 *    以终为始，结合最终的方案和你自己的现状
 *  2.3 理解规划选方案
 *    短期方案与长期规划的关系
 *    技术视野与行业调研
 *    给别人描述选择的逻辑
 *  2.4 落实方案拿成果
 *    目标和成果能够match上
 *    在量化的时候你会发现很多问题，比如说怎么量化，量化指标到底什么样，量化了之后应该怎么衡量，最后怎么反馈业务
 *
 * 3.如何系统跟别人讲（任何一个方向都希望做到超出预期）
 * ================下面介绍star法则
 *   3.1 STAR模型大概分为三块，S&T是背景和任务，A是项目重要行动，R是项目成果。
 *   3.2 背景和任务体现你的认知高度，把背景任务讲明白就成功了一半。
 *       背景和任务讲清楚有利于评委理解项目的意义与价值。（避免被动的去做，或者为了做而做）
 *   3.3 行动
 *       技术选型：充分分析行业内解决方案，结合业务诉求选择合理的技术方案。体现技术视野和方法论
 *       技术架构：通过架构图把技术方案具象化，架构层级清晰。体现技术架构能力。能通过一个简单的架构图让评委理解你，把架构的层级关系理清楚，体现整体的技术架构能力
 *       技术难点：归纳总结出一个或多个有挑战的技术点。体现专业知识和专业技能。（去找可提炼的点）
 *   3.4 结果
 *        数据量化
 *        指标客观公正
 *        结果有说服力。最好有通过行动带来的直接结果。
 *
 * 4. 理解听众的出发点
 *    4.1 解决什么问题，业务最重要的几件事分别是什么（既然拿出来说，别人就可以理解你认为这是有价值，产生价值的）
 *      为什么要做，前面我们解释过基于业务做规划，背景逻辑不清楚，评委可能质疑项目的价值，进而质疑候选人的业务理解和技术规划
 *    4.2 使用什么方法
 *        选型逻辑不清楚，评委可能质疑技术方案有问题，甚至造轮子，进而质疑候选人的技术视野和技术规划。
 *    4.3 遇到什么挑战
 *        评委有可能会觉得你的项目没挑战，更多的是做了一些脏活累活
 *        合理陈述项目的挑战，不限于技术本身的挑战，如团队配合、项目管理的挑战都可以有合理的技术方案来解决
 *    4.4 取得什么结果
 *        没理解项目的价值，或者项目与候选人陈述的成果没直接逻辑关系
 *        理清目标-方案-成果之间的逻辑关系，成果最好能跟目标对齐。
 *    4.5 担任什么角色
 *        不明确你在协作项目中到底贡献了哪些，质疑你的业绩贡献。项目里哪些东西是你做的？
 *        按实际分工情况回答
 *    4.6 未来什么规划
 *        没理解项目的后续发展规划，或者没理解后续发展规划的合理性
 *        结合业务发展和技术发展的实际情况，如实陈述项目未来规划
 */


/**
 * 领域知识内的能力模型
 * 1.通用能力
 *    1.1 发现与解决问题
 *    1.2 技术规划
 *    1.3 执行力
 *    1.4 沟通协作
 * 2.专业知识
 *    2.1 业务知识，广度与深度
 *    2.2 知识体系
 * 3.专业技能
 *    3.1 开发能力
 *    3.2 架构能力
 *    3.3 业务运维
 * 4.专业影响力
 *    4.1 方法论建设（抽象往上思考的能力，由形到神）
 *    4.2 知识传承
 *    4.3 人才培养
 *
 */

/**
 * @description 解读OKR
 * 参考书籍
 * 1. 这就是OKR
 *
 *
 *
 *
 * 第一次阅读
 *  1. 想法很容易，执行最重要，OKR就是目标与关键结果
 *    1.1 什么是目标
 *      1.1.1 目标应该结合企业或者部门的前进方向，阶段性需要实现的东西
 *      1.1.2 目标的制定非常重要，需要自己和上级对齐，目标本身是可描述的，不是含糊不清的
 *    1.2 什么是关键结果
 *      1.2.1 需要是具体的，有时间限制（如一个季度）
 *      1.2.2 最重要的是需要是可衡量与可验证的（如果没有数字可衡量，就不能算关键结果）
  */
